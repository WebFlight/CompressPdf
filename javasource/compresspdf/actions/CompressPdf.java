// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package compresspdf.actions;

import com.mendix.core.Core;
import com.mendix.logging.ILogNode;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.webui.CustomJavaAction;
import compresspdf.helpers.PdfImageCompressor;
import org.apache.pdfbox.cos.COSName;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.PDResources;
import org.apache.pdfbox.pdmodel.graphics.PDXObject;
import org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;

public class CompressPdf extends CustomJavaAction<IMendixObject>
{
	private final IMendixObject pdfObject;
	private final java.lang.Long CompressionLevel;
	private final java.lang.Long CompressFileSize;

	public CompressPdf(
		IContext context,
		IMendixObject _pdfObject,
		java.lang.Long _compressionLevel,
		java.lang.Long _compressFileSize
	)
	{
		super(context);
		this.pdfObject = _pdfObject;
		this.CompressionLevel = _compressionLevel;
		this.CompressFileSize = _compressFileSize;
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		// BEGIN USER CODE
			ILogNode LOG = Core.getLogger("CompressPdf");
	        LOG.trace("Running CompressPdf");
		 	IContext context = getContext();
	        String entityTypeName = pdfObject.getType();



	        try (InputStream pdfStream = Core.getFileDocumentContent(context, pdfObject);
	                ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) {

	               // Load PDF document using PDFBox
	               PDDocument pdfDoc = PDDocument.load(pdfStream);

	               // Instantiate PdfImageCompressor with the specified compression level
	               int compression = 2;
	               if (CompressionLevel != null && CompressionLevel != 0) {
	                   compression = CompressionLevel.intValue();
	               }
	               if (CompressionLevel != null && CompressionLevel == 0) {
	                   compression = 1;
	               } 
	               int MinFileSize = 500 * 1024;
	               if (CompressFileSize != null) {
	            	   MinFileSize  = (int) (CompressFileSize * 1024);
	               }

	               PdfImageCompressor compressor = new PdfImageCompressor(compression);
	               

	               // Process each page
	               LOG.trace("Compressing images");
	               for (PDPage page : pdfDoc.getPages()) {
	                   compressor.compressImagesOnPage(page, pdfDoc, LOG, compression, MinFileSize);
	               }
	               LOG.trace("Images compressed");

	               // Save modified PDF to ByteArrayOutputStream
	               pdfDoc.save(outputStream);
	               pdfDoc.close();
	               LOG.trace("Pdf closed");

	               // Create new Mendix object for compressed PDF
	               IMendixObject compressedPdfObject = Core.instantiate(context, entityTypeName);
	               compressedPdfObject.setValue(getContext(), "Name", "output.pdf");
	               LOG.trace("Creating new pdf");

	               // Store compressed PDF content
	               Core.storeFileDocumentContent(context, compressedPdfObject,
	                       new ByteArrayInputStream(outputStream.toByteArray()));

	               // Return the compressed PDF Mendix object
	               LOG.trace("Done");
	               return compressedPdfObject;
	           }
	
	       
	   
	    
	
   
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "CompressPdf";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
